<?php

namespace CodeLands\MobileLogin\Observer;

use CodeLands\MobileLogin\Model\Constant;
use CodeLands\MobileNumberLoginExtend\Setup\UpgradeData;
use Magento\Framework\Event\Observer;
use Magento\Framework\Event\ObserverInterface;

class SendSmsPlaceOrder implements ObserverInterface
{
    protected $configProvider;

    protected $smsGateWayFactory;

    protected $smsMessageInterfaceFactory;

    protected $collectionFactory;

    protected $urlBuilder;

    protected $customerRepository;

    public function __construct(
        \CodeLands\MobileLogin\Model\Config\ConfigProvider $configProvider,
        \CodeLands\MobileLogin\Model\GatewayFactory $gatewayFactory,
        \CodeLands\MobileLogin\Model\Sms\SmsMessageInterfaceFactory $smsMessageInterfaceFactory,
        \Magento\Framework\UrlInterface $urlBuilder,
        \Magento\Customer\Api\CustomerRepositoryInterface $customerRepository
    ) {
        $this->configProvider = $configProvider;
        $this->smsGateWayFactory = $gatewayFactory;
        $this->smsMessageInterfaceFactory = $smsMessageInterfaceFactory;
        $this->urlBuilder = $urlBuilder;
        $this->customerRepository = $customerRepository;
    }

    public function execute(Observer $observer)
    {
        /** @var \Magento\Sales\Model\Order $order */
        $order = $observer->getData('order');
        try {
            $customer = $this->customerRepository->getById($order->getCustomerId());
            $fullMobileNumber = $customer->getCustomAttribute(Constant::FULL_MOBILE_NUMBER)
                ? $customer->getCustomAttribute(Constant::FULL_MOBILE_NUMBER)->getValue()
                : null;
            $emailAutoGenerated = $customer->getCustomAttribute(Constant::EMAIL_AUTO_GENERATED)
                ? $customer->getCustomAttribute(Constant::EMAIL_AUTO_GENERATED)->getValue()
                : null;

            if ($fullMobileNumber && $emailAutoGenerated) {
                $customerUrl = $this->urlBuilder->getUrl('customer/account');
                $template = $this->configProvider->getTemplateOrderSuccess();
                $template = str_replace('{{customerUrl}}', $customerUrl, $template);

                $messageData['data'] = [
                    'from' => $this->configProvider->getTwilioPhoneNumber($order->getStoreId()),
                    'to' => $fullMobileNumber,
                    'store' => $order->getStoreId(),
                    'raw_template' => $template
                ];

                $message = $this->smsMessageInterfaceFactory->create($messageData);
                $this->smsGateWayFactory->create(['message' => $message])->sendMessage();
            }
        } catch (\Exception $e) {
        }
    }
}
